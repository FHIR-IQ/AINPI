// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Practitioner {
  id       String   @id @default(uuid())
  fhirId   String   @unique @map("fhir_id")

  // Core identifiers
  npi       String?  @unique
  deaNumber String?  @map("dea_number")
  taxId     String?  @map("tax_id")

  // Personal info
  firstName  String   @map("first_name")
  middleName String?  @map("middle_name")
  lastName   String   @map("last_name")
  suffix     String?
  gender     String?

  // Contact
  email        String  @unique
  phone        String?
  passwordHash String? @map("password_hash")

  // Address
  addressLine1 String? @map("address_line1")
  addressLine2 String? @map("address_line2")
  city         String?
  state        String?
  postalCode   String? @map("postal_code")
  country      String? @default("US")

  // FHIR representation (stored as JSON)
  fhirResource Json?   @map("fhir_resource")

  // Extended provider data (JSON)
  specialties       Json? // Array of {code, display, isPrimary}
  licenses          Json? // Array of {state, licenseNumber, type, status, expirationDate}
  practiceLocations Json? @map("practice_locations") // Array of location objects
  insurancePlans    Json? @map("insurance_plans") // Array of insurance plan objects

  // Metadata
  status       String  @default("pending_verification")
  active       Boolean @default(true)
  completeness Int     @default(0)
  verified     Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  roles     PractitionerRole[]
  syncLogs  SyncLog[]
  consents  Consent[]

  @@index([email])
  @@index([npi])
  @@index([fhirId])
  @@map("practitioners")
}

model PractitionerRole {
  id             String   @id @default(uuid())
  fhirId         String   @unique @map("fhir_id")
  practitionerId String   @map("practitioner_id")

  // Role details
  specialtyCode    String? @map("specialty_code")
  specialtyDisplay String? @map("specialty_display")

  // Practice location
  practiceName        String? @map("practice_name")
  practiceAddressLine1 String? @map("practice_address_line1")
  practiceAddressLine2 String? @map("practice_address_line2")
  practiceCity        String? @map("practice_city")
  practiceState       String? @map("practice_state")
  practicePostalCode  String? @map("practice_postal_code")

  // Accepted insurances (JSON array)
  acceptedInsurances Json?   @map("accepted_insurances")

  // License
  licenseState      String?   @map("license_state")
  licenseNumber     String?   @map("license_number")
  licenseExpiration DateTime? @map("license_expiration")

  // FHIR representation
  fhirResource Json    @map("fhir_resource")

  // Status
  active Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  practitioner Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  @@map("practitioner_roles")
}

model SyncLog {
  id             String   @id @default(uuid())
  practitionerId String   @map("practitioner_id")

  // Sync details
  targetSystem String  @map("target_system")
  targetUrl    String? @map("target_url")
  syncType     String  @default("manual") @map("sync_type")
  eventType    String  @default("provider.updated") @map("event_type")

  // Status
  status String @default("pending")

  // Request/Response
  requestPayload Json?   @map("request_payload")
  responseStatus Int?    @map("response_status")
  responseBody   String? @map("response_body") @db.Text
  errorMessage   String? @map("error_message") @db.Text

  // Performance
  durationMs Int? @map("duration_ms")

  // Timestamp
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  practitioner Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@map("sync_logs")
}

model Consent {
  id             String   @id @default(uuid())
  practitionerId String   @map("practitioner_id")

  // Recipient organization details
  recipientName       String  @map("recipient_name")
  recipientType       String  @map("recipient_type")
  recipientId         String? @map("recipient_id")
  recipientWebhookUrl String? @map("recipient_webhook_url")

  // Authorization details
  status String @default("active")
  scope  Json?  // Array of scopes

  // Purpose
  purpose String? @db.Text

  // Validity period
  validFrom  DateTime? @map("valid_from")
  validUntil DateTime? @map("valid_until")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  practitioner Practitioner @relation(fields: [practitionerId], references: [id], onDelete: Cascade)

  @@map("consents")
}

model ProviderDirectoryAPI {
  id       String   @id @default(uuid())

  // Organization details
  organizationName String  @map("organization_name")
  organizationType String  @map("organization_type") // 'health_system' | 'insurance_payer' | 'state_board'
  state            String? // State if specific to one state

  // API details
  apiEndpoint      String  @map("api_endpoint")
  apiType          String  @map("api_type") // 'rest' | 'fhir' | 'soap' | 'web_scrape'
  apiDocUrl        String? @map("api_doc_url")

  // Authentication
  requiresAuth     Boolean @default(false) @map("requires_auth")
  authType         String? @map("auth_type") // 'api_key' | 'oauth' | 'basic' | 'none'

  // API capabilities
  supportsNpiSearch   Boolean @default(false) @map("supports_npi_search")
  supportsNameSearch  Boolean @default(false) @map("supports_name_search")
  searchParamFormat   Json?   @map("search_param_format") // How to format search params

  // Connection status
  status              String  @default("discovered") // 'discovered' | 'tested' | 'active' | 'inactive' | 'error'
  lastTestedAt        DateTime? @map("last_tested_at")
  lastSuccessAt       DateTime? @map("last_success_at")
  consecutiveFailures Int     @default(0) @map("consecutive_failures")

  // Performance metrics
  avgResponseTimeMs   Int?    @map("avg_response_time_ms")
  successRate         Float?  @map("success_rate")

  // Discovery info
  discoveredBy        String  @map("discovered_by") // 'manual' | 'ai_scanner' | 'import'
  discoverySource     String? @map("discovery_source")

  // Metadata
  notes               String? @db.Text

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  scanResults MagicScanResult[]

  @@unique([organizationName, apiEndpoint])
  @@index([organizationType, state])
  @@index([status])
  @@map("provider_directory_apis")
}

model MagicScanResult {
  id             String   @id @default(uuid())
  practitionerId String?  @map("practitioner_id")

  // Search criteria
  npi            String
  lastName       String   @map("last_name")
  state          String?

  // Results summary
  totalSourcesChecked   Int     @map("total_sources_checked")
  totalSourcesFound     Int     @map("total_sources_found")
  totalDiscrepancies    Int     @map("total_discrepancies")

  // NPPES staleness
  nppesIsStale          Boolean? @map("nppes_is_stale")
  nppesDaysSinceUpdate  Int?     @map("nppes_days_since_update")
  nppesNeedsSync        Boolean? @map("nppes_needs_sync")

  // Full results (JSON)
  scanResults           Json     @map("scan_results")
  aiSummary             String?  @map("ai_summary") @db.Text
  citations             Json?    // Array of URLs

  // API connections attempted
  apiConnectionResults  Json?    @map("api_connection_results") // Array of connection test results

  // Relations
  apiId                 String?  @map("api_id")
  api                   ProviderDirectoryAPI? @relation(fields: [apiId], references: [id])

  // Timestamps
  scannedAt DateTime @default(now()) @map("scanned_at")

  @@index([npi])
  @@index([scannedAt])
  @@map("magic_scan_results")
}
